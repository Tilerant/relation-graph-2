请注意，所有内容都添加完整的中文注释。

图谱设计v2.0
# 一、系统定位与目标
定位：一款以“结构”为核心的图谱笔记系统，支持结构化笔记构建、图谱表达、多视图展示、AI 协作编辑。
目标：
- 支持节点、边、结构块、结构视图的结构化表达
- 用户与 AI 都通过统一命令系统（类似vscode）操作结构
- 支持白板/网页等视图布局，自由切换
- 前后端均插件化、命令化，形成对称生态
- 存储策略可切换，支持本地/移动/企业/云等场景

- 使用 electron 框架，前端react，后端暂时使用python
- 图谱使用 react flow 
```npm install @xyflow/react```
- platejs:https://github.com/udecode/plate-playground-template.git
- 前后端共用一个库
- 

---
# 二、核心架构模块
1. 结构语言层（Structure Layer）
- 抽象实体：Node、Edge、Block、View
- node和edge都具有元属性、可变属性和block索引，node额外具有标题
- 可变属性是用户可以自行添加的字段
- node元属性中有实体标签
- edge支持超边，元属性中有语义标签
- block类似于notion风格，可以插入丰富的文件类型
- 模板系统：可以根据实体标签、语义标签自动填写可变属性
- 所有信息展示在view中，view负责保存排版规则、节点索引等。
- 支持序列化（JSON/Markdown）与反序列化，支持 AI 解析与生成

---
2. 命令系统（Command System）
- 所有操作都封装为命令（前后端统一）
- 命令注册表：registerCommand(name, handler)
- 调用方式：runCommand("structure.addNode", payload)
- 命令可来自用户操作、AI 推理、插件、工作流、远程指令
- 支持命令组合、权限限制、AI trace 回放等扩展特性

---
3. 插件机制（Plugin System）
- 前端插件：可注册 UI 组件、结构块类型、命令、AI 工具
- 后端插件：可注册命令、数据库后端、图算法、导入导出工具
- 插件结构：包含 manifest、register.ts、commands 目录等
- 插件可在运行时按需加载/注册，形成扩展生态

---
4. 视图系统（View System）
- 支持两类视图：
  - 白板视图（React Flow）：自由拖拽、布局展示、结构交互
  - 网页视图（Plate 编辑器）：内容聚焦、结构块级编辑
- 视图支持：
  - 按结构/超边/查询生成子视图（新建一个子白板视图）
  - 局部/全局布局切换
  - 持久化布局与临时布局并存
  - （布局的思路可能还需要重新抽象与设计，现在只实现图谱和白板的基础功能就行了）
- 白板卡片：详情查看“节点与边”


---
# 三、数据存储层（Storage & Query）
1. 存储策略可切换（多态后端）
- 支持多种存储后端：
  - SQLite（本地桌面）
  - JSON+Markdown（纯文件）
  - IndexedDB/pglite（浏览器/移动）
  - PostgreSQL/Firebase（企业/云）
- 每种后端实现统一接口 DataBackend：
interface DataBackend {
  loadNode, saveNode, querySubgraph, runGraphOp, export, import
}
2. 插件式后端注册
- 每种后端作为插件注册：
registerBackend("sqlite", SQLiteBackend)
- 可按配置/运行环境选择默认后端
- 支持导入导出、迁移、混合使用

---
3. 图算法执行层
- 图操作封装为命令：runCommand("graph.shortestPath", { from, to })
- 图数据库（如 Neo4j）：使用原生算法
- SQL/JSON 后端：转为内存图执行（如 NetworkX/graphlib）
- 插件可注册自定义算法，如闭环检测、支持路径分析、结构聚类

---
# 四、AI 协作系统（AI Integration）
- AI 角色：
  - 命令生成器（结构操作建议）
  - 结构建议器（补全结构、生成子图）
  - 视图导航器（推荐焦点、生成导览）
  - 工作流构建器（结构命令链编排）
- AI 与结构交互方式：
  - 可读取结构上下文
  - 可发起命令调用（runCommand）
  - 可生成结构块、结构图、节点建议

---
# 五、开发与演化策略
MVP 路线
1. 构建结构语言原型（Node/Edge/Block + JSON）
2. 实现命令注册/执行器（前后端共用）
3. 搭建白板视图 + 网页视图 + 状态管理（Zustand）
4. 集成最简 SQLite/JSON 后端
5. 加入结构查询 + 基础图算法（内存执行）
6. 支持 AI 插件接入结构命令
后续迭代点
- 工作流编排器（结构化命令链 + 可视化）
- 查询语言 + DSL（结构搜索、子图聚合）
- 结构导出格式（结构 Markdown + PDF + zip 包）
- 多人协作 + 权限模型（远期）

---
# 六、系统关键特性总结
模块
关键特性
结构语言
语义清晰、结构可组合、可视图、多种持久化形式
命令系统
前后端统一、AI 调用友好、易组合、插件扩展
插件系统
包含 UI 插件、AI 工具、存储后端、图算法模块
视图系统
支持局部/全局布局、子图视图、多种交互方式
数据后端
多后端抽象接口 + 插件化注册 + 支持图操作
AI 接口
深度参与结构操作，具备“结构写作”与“视图建议”能力

---
白板视图中的节点与边
- 软件界面类似vscode，最左侧是插件栏，然后是列表，中间是图谱的显示区域，如果点击某个卡片的详情则在右侧打开它的网页视图
# 基本结构
- 属性：包含节点的元信息和自定义属性字段
- 标题：节点的标题
- 内容块：notion风格的块，可以用plate
# 节点的三种模式
1. 圆点
- 标题悬浮于几何中心（或者下方一段距离）
- 通常用于D3力导向布局
2. 框
- 跟随输入文本自动改变长度
- 有最大宽度，超过自动换行
- 本质是节点的一个文本型内容块
- 主要用于思维导图
- 单独设置样式
3. 卡片
- 包含标题、内容块和属性
- 可以通过折叠只显示标题或只显示内容块，折叠后的样式与卡片本身保持一致
- 可以自由设置大小，有最小的宽度和高度。标题或者内容超过当前宽度就换行。
- 标题可以为空
- 内容快可以拖动更换顺序
# 边的四种模式
与节点的操作基本相同，下面为补充，主要使用纯连线和框
1. 纯连线
2. 框
- 线上任意位置双击创建的框
- 跟随线移动
3. 圆点
- 如果包含超过一个内容块，则框变为圆点
- 圆点的位置跟随线移动
4. 卡片
- 跟随线移动

---
1. 新建节点时选取何种节点作为初始节点编辑？
  1. 这个可能需要动态变化，比如在一个导图中添加节点的时候，应该默认是框的形式，而直接在白板空白处添加是卡片
2. 卡片拖拽变化宽度时，是否需要设定最大值？
  1. 有最大值
3. 卡片内容换行时，是块内换行还是新建块？
  1. 换行默认新建块，如需块内换行加别的组合键
4. 框是否需要添加状态栏？
  1. 没有状态栏
5. 如何处理框与卡片的转换关系？（内容，标题如何互相对应？）
  1. 有标题就标题，没有就第一个框

---
以“知识库”为单位，整个“知识库”共享数据库，“知识库”中默认包含一个主视图，显示所有的节点与边。